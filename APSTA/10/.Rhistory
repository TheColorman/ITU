cars93
Cars93
cars = Cars93
Cars93
cars <- Cars93
library(Cars93)
cars <- Cars93
library(MASS)
library(MASS)
cars <- Cars93
cars[cars$Cylinders == 8,]$names
library(MASS)
cars <- Cars93
cars[cars$Cylinders == 8,]
cars[cars$Cylinders == 8,]$AirBags
library(MASS)
cars <- Cars93
cars[cars$Cylinders == 8,]$AirBags
library(MASS)
cars <- Cars93
cars[cars$Cylinders == 8,]
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car$Manufacturer, car$Model)
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
#sprintf("%s %s has 8 cylinders", car$Manufacturer, car$Model)
print(car)
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
#sprintf("%s %s has 8 cylinders", car$Manufacturer, car$Model)
print(car$Manufacturer)
}
#sprintf("%s %s has 8 cylinders", car$Manufacturer, car$Model)
print(car)
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
#sprintf("%s %s has 8 cylinders", car$Manufacturer, car$Model)
print(car[1])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
sprintf("%s %s has 8 cylinders", car[1], car[2])
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
sprintf("%s %s has 8 cylinders", car[1], car[2])
}
sprintf("%s %s has 8 cylinders", car[1], car[2])
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
print(car[1], car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
print(car[1])
print(car[2])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
print(car[1])
}
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
library(MASS)
cars <- Cars93
eightcars = cars[cars$Cylinders == 8,]
for (car in eightcars) {
print(car[1])
}
library(MASS)
cars <- Cars93
cars[cars$Cylinders == 8,]
library(MASS)
cars <- Cars93
eight = cars[cars$Cylinders == 8,]
print(eight)
library(MASS)
cars <- Cars93
eight = cars[cars$Cylinders == 8,]
print(eight[1])
library(MASS)
cars <- Cars93
eight = cars[cars$Cylinders == 8,]
print(eight[1:2])
mean(eight$Horsepower)
SD(eight$Horsepower)
sd(eight$Horsepower)
library(MASS)
cars <- Cars93
eight = cars[cars$Cylinders == 8,]
print(eight[1:2])
mean(eight$Horsepower)
sd(eight$Horsepower)
six = cars[cars$Cylinders == 6,]
print(six[1:2])
mean(six$Horsepower)
sd(six$Horsepower)
rain <- Precip
rain <- precip
rain
typeof(rain)
rain
mean(rain)
rain[rain > 50]
main(rain)
min(rain)
rain[min(rain)]
sort(rain)[1:5]
rivers
rivers
mean(rivers)
mean(rivers)
mean(rivers)
mean(rivers, trim=0.25)
rivers
sd(rivers)
function gen_res() {
function gen_res {
gen_res <- function() {
return(sqqrt(runif()))
}
replicate(100, gen_res())
gen_res <- function() {
return(sqrt(runif()))
}
replicate(100, gen_res())
?runif
ruinf(100)
runif(100)
sqrt(runif(100))
plot(sqrt(runif(100)))
bar(sqrt(runif(100)))
barplot(sqrt(runif(100)))
library(UsingR)
# Take a look at the dataset
head(brightness)
sample_mean <- mean(brightness)
bootstrap_means <- c()
for (i in 1:1000) {
bootstrap_sample <- sample(brightness, size = length(brightness), replace = TRUE)
bootstrap_means <- c(bootstrap_means, sample_mean - mean(bootstrap_sample))
}
plot(density(bootstrap_means))
bootstrap_means_difference_distribution <- ecdf(bootstrap_means)
probability_outside <- 1 - (bootstrap_means_difference_distribution(0.1) - bootstrap_means_difference_distribution(-0.1))
probability_outside
# start by taking a look at the data
plot(density(arctic.oscillations, na.rm = T))
arctic.cleaned <- na.omit(arctic.oscillations)
expectation_estimate <- mean(arctic.cleaned)
variance_estimate <- var(arctic.cleaned)
plot(ecdf(arctic.cleaned))
curve(pnorm(x, mean=variance_estimate, sd=variance_estimate), col='red', add=T)
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
variance_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = variance_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_variance <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_variance
)
)
}
plot(density(bootstrap_ks), xlim=c(0,0.2))
abline(v=ks_estimate, col='red')
library(UsingR)
# Take a look at the dataset
head(brightness)
sample_mean <- mean(brightness)
bootstrap_means <- c()
for (i in 1:1000) {
bootstrap_sample <- sample(brightness, size = length(brightness), replace = TRUE)
bootstrap_means <- c(bootstrap_means, sample_mean - mean(bootstrap_sample))
}
plot(density(bootstrap_means))
bootstrap_means_difference_distribution <- ecdf(bootstrap_means)
probability_outside <- 1 - (bootstrap_means_difference_distribution(0.1) - bootstrap_means_difference_distribution(-0.1))
probability_outside
# start by taking a look at the data
plot(density(arctic.oscillations, na.rm = T))
arctic.cleaned <- na.omit(arctic.oscillations)
expectation_estimate <- mean(arctic.cleaned)
sd_estimate <- sd(arctic.cleaned)
plot(ecdf(arctic.cleaned))
curve(pnorm(x, mean=expectation_estimate, sd=sd_estimate), col='red', add=T)
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
sd_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = sd_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_sd <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_sd
)
)
}
plot(density(bootstrap_ks), xlim=c(0,0.2))
abline(v=ks_estimate, col='red')
plot(density(bootstrap_ks), xlim=c(0,0.6))
plot(density(bootstrap_ks), xlim=c(0,0.06))
abline(v=ks_estimate, col='red')
library(UsingR)
# Take a look at the dataset
head(brightness)
sample_mean <- mean(brightness)
bootstrap_means <- c()
for (i in 1:1000) {
bootstrap_sample <- sample(brightness, size = length(brightness), replace = TRUE)
bootstrap_means <- c(bootstrap_means, sample_mean - mean(bootstrap_sample))
}
plot(density(bootstrap_means))
bootstrap_means_difference_distribution <- ecdf(bootstrap_means)
probability_outside <- 1 - (bootstrap_means_difference_distribution(0.1) - bootstrap_means_difference_distribution(-0.1))
probability_outside
# start by taking a look at the data
plot(density(arctic.oscillations, na.rm = T))
arctic.cleaned <- na.omit(arctic.oscillations)
expectation_estimate <- mean(arctic.cleaned)
sd_estimate <- sd(arctic.cleaned)
plot(ecdf(arctic.cleaned))
curve(pnorm(x, mean=expectation_estimate, sd=sd_estimate), col='red', add=T)
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
sd_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = sd_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_sd <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_sd
)
)
}
plot(density(bootstrap_ks), xlim=c(0,0.06))
abline(v=ks_estimate, col='red')
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
sd_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = sd_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_sd <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_sd
)
)
}
plot(density(bootstrap_ks), xlim=c(0,0.06))
abline(v=ks_estimate, col='red')
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
sd_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = sd_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_sd <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_sd
)
)
}
densityplot((bootstrap_ks), xlim=c(0,0.06))
abline(v=ks_estimate, col='red')
ks_distance_norm_distribution <- function(bootstrapped_data, mean, sd) {
empirical_distribution <- ecdf(bootstrapped_data)
return(max(
abs(
empirical_distribution(bootstrapped_data)
- pnorm(bootstrapped_data, mean = mean, sd = sd)
)
))
}
ks_estimate <- ks_distance_norm_distribution(
arctic.cleaned,
expectation_estimate,
sd_estimate
)
bootstrap_ks <- c()
for (i in 1:1000) {
bootstrap_sample <- rnorm(
length(arctic.cleaned),
mean = expectation_estimate,
sd = sd_estimate
)
bootstrap_expectation <- mean(bootstrap_sample)
bootstrap_sd <- var(bootstrap_sample)
bootstrap_ks <- c(
bootstrap_ks,
ks_distance_norm_distribution(
bootstrap_sample,
bootstrap_expectation,
bootstrap_sd
)
)
}
plot(density(bootstrap_ks), xlim=c(0,0.06))
abline(v=ks_estimate, col='red')
setwd("C:/Users/thore/Documents/Repositories/ITU/APSTA/10")
n <- 200
estimate_p <- function(X) {
return(length(X)/(length(X)+sum(X)))
}
p <- 0.3
diffs <- c()
diffs_star <- c()
for (i in 1:1000) {
X <- rgeom(n, p)
p_est <- 1/mean(X)
p_est_star <- estimate_p(X)
diff <- p_est - p
diff_star <- p_est_star - p
diffs <- c(diffs, diff)
diffs_star <- c(diffs_star, diff_star)
}
plot(density(diffs_star), xlim=c(-0.06, 0.3), col="magenta", sub="Magenta: True estimate. Blue: Bad estimate")
lines(density(diffs), col="blue")
library(MASS)
fit <- lm(Cars93$MPG.highway ~ Cars93$Horsepower)
plot(Cars93$Horsepower, Cars93$MPG.highway)
abline(fit, col="red")
coeffs <- coefficients(fit)
estimate_mpg <- function(x) {
return(coeffs[1] + coeffs[2]*x)
}
hp <- 225
cat("The estimated mileage for a car with", hp, "horsepower is", estimate_mpg(hp))
res <- resid(fit)
plot(res)
