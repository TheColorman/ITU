setwd("W:/Projects/ITU/APSTA/13")
qt(1-0.05/2, 15)
qt(1-0.05/2, 15)
qt(1-0.05, 15)
qt(1-0.05, 15)
# Import the dataset
library(UsingR)
head(OBP)
# Import the dataset
library(UsingR)
head(OBP)
length(OBP)
summary(OBP)
# Import the dataset
library(UsingR)
summary(OBP)
plot(density(OBP))
shapiro.test(OBP)
length(OBP)
plot(density(OBP))
shapiro.test(OBP)
length(OBP)
plot(density(OBP))
shapiro.test(OBP)
n <- length(OBP)
sqrt_n <- sqrt(n)
x_bar <- mean(OBP)
t_s_samples <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(OBP, size=n, replace=TRUE)
bootstrap_x_bar <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_x_bar - x_bar) / (bootstrap_sd / sqrt_n)
t_s_samples <- c(t_s_samples, t_s)
}
t_s
n <- length(OBP)
sqrt_n <- sqrt(n)
x_bar <- mean(OBP)
t_s_samples <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(OBP, size=n, replace=TRUE)
bootstrap_x_bar <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_x_bar - x_bar) / (bootstrap_sd / sqrt_n)
t_s_samples <- c(t_s_samples, t_s)
}
t_s_samples
n <- length(OBP)
sqrt_n <- sqrt(n)
x_bar <- mean(OBP)
t_s_samples <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(OBP, size=n, replace=TRUE)
bootstrap_x_bar <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_x_bar - x_bar) / (bootstrap_sd / sqrt_n)
t_s_samples <- c(t_s_samples, t_s)
}
quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))[1]
quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_l_s, c_u_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_l_s <- c_s[1]
c_u_s <- c_s[2]
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_l_s <- c_s[1]
c_u_s <- c_s[2]
cat("Test statistic realisation:", x_bar)
cat("Lower/upper bound @ significance 0.05:", c_s)
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_l_s <- c_s[1]
c_u_s <- c_s[2]
cat("Test statistic realisation:", x_bar)
cat("\nLower/upper bound @ significance 0.05:", c_s)
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
c_l_s <- c_s[1]
c_u_s <- c_s[2]
t <- (x_bar - 0.330) / (sd(OBP) / sqrt_n)
cat("Test statistic realisation:", t)
cat("\nLower/upper bound @ significance 0.05:", c_s)
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
t <- (x_bar - 0.330) / (sd(OBP) / sqrt_n)
cat("Test statistic realisation:", t)
cat("\nLower/upper bound @ significance 0.05:", c_s)
c_s <- quantile(t_s_samples, probs=c(0.05/2, 1-0.05/2))
t <- (x_bar - 0.330) / (sd(OBP) / sqrt_n)
cat("Test statistic realisation:", t)
cat("\nLower/upper bound @ significance 0.05:", c_s)
kable(df, col.names = c("", "Sad", "Happy"), escape = F, caption = "My caption") %>%
kable_styling(latex_options = "hold_position")
library(knitr)
library(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
library(knitr)
library(kableExtra)
df <- data.frame(Cat = c("Short", "Tall"),
Sad = linebreak(c("Sam\nBeth", "Erin\nTed")),
Happy = linebreak(c("Jim\nSara", "Bob\nAva")))
kable(df, col.names = c("", "Sad", "Happy"), escape = F, caption = "My caption") %>%
kable_styling(latex_options = "hold_position")
data <- c(20.1, 19.1, 18.2, 20.2, 19.6, 19.1)
cat("Mean:", mean(data))
cat("\nStandard deviation:", sd(data))
cat("\nsqrt(n):", sqrt(length(data)))
data <- c(20.1, 19.1, 18.2, 20.2, 19.6, 19.1)
cat("Mean:", mean(data))
cat("\nStandard deviation:", sd(data))
cat("\nsqrt(n):", sqrt(length(data)))
sd(data)/sqrt(length(data))
data <- c(20.1, 19.1, 18.2, 20.2, 19.6, 19.1)
cat("Mean:", mean(data))
cat("\nStandard deviation:", sd(data))
cat("\nsqrt(n):", sqrt(length(data)))
(mean(data)-20)/(sd(data)/sqrt(length(data)))
data <- c(20.1, 19.1, 18.2, 20.2, 19.6, 19.1)
cat("Mean:", mean(data))
cat("\nStandard deviation:", sd(data))
cat("\nsqrt(n):", sqrt(length(data)))
*Solution*:
ct <- qt(1-0.05, 6-1)
ct <- qt(1-0.05, 6-1)
cat("Critical value: ", ct)
ct <- qt(1-0.05, 6-1)
cat("Critical value:", ct)
ct <- -qt(1-0.05, 6-1)
cat("Critical value:", ct)
ct <- -qt(1-0.05, 6-1)
cat("Critical value:", ct)
n <- length(data)
t <- (mean(data)-20) / (sd(data)/sqrt(n))
p <- pt(t, n-1)
n <- length(data)
t <- (mean(data)-20) / (sd(data)/sqrt(n))
p <- pt(t, n-1)
cat("p-value:", p)
n <- length(data)
t <- (mean(data)-20) / (sd(data)/sqrt(n))
p <- pt(t, n-1)
cat("p-value:", p)
t_p_calc <- function(x_bar, y_bar, mu_x, mu_y, var_x, var_y, n, m) {
s_p <- (((n-1)*var_x+(m-1)*var_y) / (n+m-2)) * (1/n + 1/m)
t_p <- ((x_bar - y_bar) - (mu_x - mu_y)) / s_p
return(t_p)
}
ct <- qt(1-0.05/2, 142)
cat("Critical value:", ct)
ct <- qt(1-0.05/2, 142)
cat("Critical value:", ct)
