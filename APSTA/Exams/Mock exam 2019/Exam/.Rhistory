cv <- qnorm(1-0.05, 0, 1)
cat("Critical value at alpha=0.05:", cv)
cv <- qnorm(1-0.05, 0, 1)
cat("Critical value at alpha=0.05:", cv)
?pnorm
t <- 1.2750477217
p <- pnorm(t, 0, 1)
cat("p-value:", p)
t <- 2.2750477217
p <- pnorm(t, 0, 1)
cat("p-value:", p)
t <- 1.2750477217
p <- pnorm(t, 0, 1)
cat("p-value:", p)
t <- 1.2750477217
p <- pnorm(t, 0, 1)
cat("p-value:", p)
t <- 1.2750477217
p <- pnorm(t, 0, 1)
cat("p-value:", 1-p)
t <- 1.2750477217
p <- 1-pnorm(t, 0, 1)
cat("p-value:", p)
t <- 2.2750477217
t <- 2.2750477217
p <- 1-pnorm(t, 0, 1)
cat("p-value:", p)
t <- 1.2750477217
p <- 1-pnorm(t, 0, 1)
cat("p-value:", p)
t <- 1.2750477217
p <- 1-pnorm(t, 0, 1)
cat("p-value:", p)
head(maydow)
library(UsingR)
head(maydow)
library(UsingR)
head(maydow)
library(UsingR)
head(maydow)
plot(maydow$DJA, maydow$max.temp)
plot(maydow$max.temp, maydow$DJA)
plot(maydow$max.temp, maydow$DJA)
filt_babies <- babies[babies$age != 99,]
min_ <- min(babies$age)
max_ <- max(babies$age)
mean_ <- mean(babies$age)
median_ <- median(babies$age)
sd_ <- sd(babies$age)
cat("Minimum:", min_)
cat("\nMaximum:", max_)
cat("\nMean:", mean_)
cat("\nMedian:", median_)
cat("\nStandard deviation:", sd_)
min_ <- min(babies$age)
max_ <- max(babies$age)
mean_ <- mean(babies$age)
median_ <- median(babies$age)
sd_ <- sd(babies$age)
cat("Minimum:", min_)
cat("\nMaximum:", max_)
cat("\nMean:", mean_)
cat("\nMedian:", median_)
cat("\nStandard deviation:", sd_)
min_ <- min(filt_babies$age)
max_ <- max(filt_babies$age)
mean_ <- mean(filt_babies$age)
median_ <- median(filt_babies$age)
sd_ <- sd(filt_babies$age)
cat("Minimum:", min_)
cat("\nMaximum:", max_)
cat("\nMean:", mean_)
cat("\nMedian:", median_)
cat("\nStandard deviation:", sd_)
summary(wellbeing)
head(wellbeing)
head(wellbeing)
?regression
?lm
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anove(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summar(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
line(model)
par(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
par(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
plot(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
plot(model$coefficients)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
lines(model)
model <- lm(wellbeing$Alcohol.consumption ~ wellbeing$Well.being)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
abline(model)
model <- lm(wellbeing$Well.being ~ wellbeing$Alcohol.consumption)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
abline(model)
model <- lm(wellbeing$Well.being ~ wellbeing$Alcohol.consumption)
anova(model)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
abline(model)
model <- lm(wellbeing$Well.being ~ wellbeing$Alcohol.consumption)
summary(model)
plot(wellbeing$Alcohol.consumption, wellbeing$Well.being)
abline(model)
yr5 <- subset(kid.weights, subset = 5*12 <= age & age < 6*12)
density(yr5)
density(yr5$age)
plot(density(yr5$age))
plot(density(yr5$age))
sqrt_n <- sqrt(length(yr5$age))
data_mean <- mean(yr5$age)
bt_t_s <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(yr5$age, replace=TRUE)
bootstrap_mean <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstra_sample)
t_s <- (bootstrap_mean - data_mean) / (bootstrap_sd / sqrt_n)
bt_t_s <- c(bt_t_s, t_s)
}
sqrt_n <- sqrt(length(yr5$age))
data_mean <- mean(yr5$age)
bt_t_s <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(yr5$age, replace=TRUE)
bootstrap_mean <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_mean - data_mean) / (bootstrap_sd / sqrt_n)
bt_t_s <- c(bt_t_s, t_s)
}
sqrt_n <- sqrt(length(yr5$age))
data_mean <- mean(yr5$age)
bt_t_s <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(yr5$age, replace=TRUE)
bootstrap_mean <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_mean - data_mean) / (bootstrap_sd / sqrt_n)
bt_t_s <- c(bt_t_s, t_s)
}
Fn <- ecdf(bt_t_s)
?ecdf
Fn <- ecdf(bt_t_s)
cl <- Fn^-1(0.05)
cl <- quantile(bt_t_s, 0.05)
cl <- quantile(bt_t_s, 0.05)
cu <- quantile(bt_t_s, 0.95)
cl <- quantile(bt_t_s, 0.05)
cu <- quantile(bt_t_s, 0.95)
cat("Critical values:", cl, ",", "cu")
cl <- quantile(bt_t_s, 0.05)
cu <- quantile(bt_t_s, 0.95)
cat("Critical values:", cl, ",", cu)
data_sd <- sd (yr5$age)
lo <- data_mean - cu * (data_sd / sqrt_n)
hi <- data_mean - cl * (data_sd / sqrt_n)
cat("Confidence interval: [", lo, ",", hi, "]")
data_sd <- sd (yr5$age)
lo <- data_mean - cu * (data_sd / sqrt_n)
hi <- data_mean - cl * (data_sd / sqrt_n)
cat("Confidence interval: [", lo, ",", hi, "]")
plot(density(yr5$weight))
*Solution*:
sqrt_n <- sqrt(length(yr5$weight))
data_mean <- mean(yr5$age)
bt_t_s <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(yr5$weight, replace=TRUE)
bootstrap_mean <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_mean - data_mean) / (bootstrap_sd / sqrt_n)
bt_t_s <- c(bt_t_s, t_s)
}
cl <- quantile(bt_t_s, 0.05)
cu <- quantile(bt_t_s, 0.95)
cat("Critical values:", cl, ",", cu)
data_sd <- sd (yr5$weight)
lo <- data_mean - cu * (data_sd / sqrt_n)
hi <- data_mean - cl * (data_sd / sqrt_n)
cat("Confidence interval: [", lo, ",", hi, "]")
# 4 Viking Lottery
In Viking Lottery one may select 6 numbers from 1 to 48 and an extra “Viking” number from 1 to 8.
# 4 Viking Lottery
In Viking Lottery one may select 6 numbers from 1 to 48 and an extra “Viking” number from 1 to 8.
sqrt_n <- sqrt(length(yr5$weight))
data_mean <- mean(yr5$age)
bt_t_s <- c()
for (i in 1:10000) {
bootstrap_sample <- sample(yr5$weight, length(yr5$weight), replace=TRUE)
bootstrap_mean <- mean(bootstrap_sample)
bootstrap_sd <- sd(bootstrap_sample)
t_s <- (bootstrap_mean - data_mean) / (bootstrap_sd / sqrt_n)
bt_t_s <- c(bt_t_s, t_s)
}
cl <- quantile(bt_t_s, 0.05)
cu <- quantile(bt_t_s, 0.95)
cat("Critical values:", cl, ",", cu)
data_sd <- sd (yr5$weight)
lo <- data_mean - cu * (data_sd / sqrt_n)
hi <- data_mean - cl * (data_sd / sqrt_n)
cat("Confidence interval: [", lo, ",", hi, "]")
draw_normal <- function() {
return(
sample(1:48, 8)
)
}
draw_viking <- function() {
return(
sample(1:8, 1)
)
}
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
count_correct_regular <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
count_correct_regular = count_correct_regular + sum(regular == i)
}
}
winnings(c(1,2,3,4,5,6,7,8),1)
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
count_correct_regular <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
count_correct_regular = count_correct_regular + sum(regular == i)
}
print(r_drawn)
print(regular)
print(count_correct_regular)
}
winnings(c(1,2,3,4,5,6,7,8),1)
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
reg_corr <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
reg_corr <- reg_corr + sum(regular == i)
}
vik_corr <- sum(viking == v_drawn)
# shitty ass if chain
if (reg_corr < 3) {
return(0)
}
if (reg_corr == 3) {
if (vik_corr == 0) {
return(4)
} else {
return(8)
}
} else if (reg_corr == 4) {
if (vik_corr == 0) {
return(25)
} else {
return(50)
}
} else if (reg_corr == 5) {
if (vik_corr == 0) {
return(1000)
} else {
return(10000)
}
} else if (reg_corr == 6) {
if (vik_corr == 0) {
return(250000)
} else {
return(1000000)
}
}
}
dolla <- 0
reg_winners <- c(1,2,3,4,5,6,7,8)
vik_winners <- c(4)
for (i in 1:100) {
dolla <- dolla - 0.8
dolla <- dolla + winnings(reg_winners, vik_winners)
}
cat("Reaped in", dolla, "from da biz")
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
reg_corr <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
reg_corr <- reg_corr + sum(regular == i)
}
vik_corr <- sum(viking == v_drawn)
# shitty ass if chain
if (reg_corr < 3) {
return(0)
}
if (reg_corr == 3) {
if (vik_corr == 0) {
return(4)
} else {
return(8)
}
} else if (reg_corr == 4) {
if (vik_corr == 0) {
return(25)
} else {
return(50)
}
} else if (reg_corr == 5) {
if (vik_corr == 0) {
return(1000)
} else {
return(10000)
}
} else if (reg_corr == 6) {
if (vik_corr == 0) {
return(250000)
} else {
return(1000000)
}
}
}
dolla <- 0
reg_winners <- c(1,2,3,4,5,6,7,8)
vik_winners <- c(4)
for (i in 1:100) {
dolla <- dolla - 0.8
dolla <- dolla + winnings(reg_winners, vik_winners)
}
cat("Reaped in", dolla, "euro from da biz")
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
reg_corr <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
reg_corr <- reg_corr + sum(regular == i)
}
vik_corr <- sum(viking == v_drawn)
# shitty ass if chain
if (reg_corr < 3) {
return(0)
}
if (reg_corr == 3) {
if (vik_corr == 0) {
return(4)
} else {
return(8)
}
} else if (reg_corr == 4) {
if (vik_corr == 0) {
return(25)
} else {
return(50)
}
} else if (reg_corr == 5) {
if (vik_corr == 0) {
return(1000)
} else {
return(10000)
}
} else if (reg_corr == 6) {
if (vik_corr == 0) {
return(250000)
} else {
return(1000000)
}
}
}
dolla <- 0
reg_winners <- c(1,2,3,4,5,6,7,8)
vik_winners <- c(4)
for (i in 1:100) {
dolla <- dolla - 0.8
dolla <- dolla + winnings(reg_winners, vik_winners)
}
cat("Reaped in", dolla, "euro from da biz")
winnings <- function(regular, viking) {
r_drawn <- draw_normal()
v_drawn <- draw_viking()
reg_corr <- 0
for (i in r_drawn) {
# literally how the fuck do you get the number of common elements of two vectors i need stack exchange for this
reg_corr <- reg_corr + sum(regular == i)
}
vik_corr <- sum(viking == v_drawn)
# shitty ass if chain
if (reg_corr < 3) {
return(0)
}
if (reg_corr == 3) {
if (vik_corr == 0) {
return(4)
} else {
return(8)
}
} else if (reg_corr == 4) {
if (vik_corr == 0) {
return(25)
} else {
return(50)
}
} else if (reg_corr == 5) {
if (vik_corr == 0) {
return(1000)
} else {
return(10000)
}
} else if (reg_corr == 6) {
if (vik_corr == 0) {
return(250000)
} else {
return(1000000)
}
}
}
dolla <- 0
reg_winners <- c(1,2,3,4,5,6,7,8)
vik_winners <- c(4)
for (i in 1:100) {
dolla <- dolla - 0.8
dolla <- dolla + winnings(reg_winners, vik_winners)
}
cat("Reaped in", dolla, "euro from da biz")
